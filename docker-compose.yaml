networks:
  drf_network:
    driver: bridge

services:
  redis:
    image: redis:latest
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 1m30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:16-alpine
    restart: on-failure
    env_file:
      - .env
    expose:
      - '5432:5432'
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', '-c', 'pg_isready -d $POSTGRES_DB -U $POSTGRES_USER']
      interval: 10s
      retries: 5
      timeout: 5s

  app:
    build: .
    tty: true
    ports:
      - '8000:8000'
    command: sh -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - .:/app

  celery:
    build: .
    tty: true
    command: celery -A config worker -l INFO
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      app:
        condition: service_started

  celery_beat:
    build: .
    tty: true
    command: [ "sh", "-c", "celery -A config beat -l INFO && celery -A config -l info -P gevent" ]
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      app:
        condition: service_started

volumes:
  pg_data:
    name: volume_name